MODULE m1_C1 (p_a, p_b, _sync )
VAR
_status : {_ACTIVE,_willDISSOLVE,_DISSOLVED};
_turn : {_CHO0,_ARB1,_MAX2,_SEQ3,_READY};
_count : 0 .. 3;
_connC2 : {to_m2,to_m3};
_cho0 : 0 .. 2;
_arb1 : 0 .. 3;
_rand : 0 .. 3;
_arb1_guard1 : boolean;
_arb1_guard2 : boolean;
_arb1_guard3 : boolean;
_max2 : 0 .. 3;
_max2_guard1 : boolean;
_max2_guard2 : boolean;
_max2_guard3 : boolean;
_seq3 : 0 .. 2;
	a : 0 .. 5;
	a_cp : 0 .. 5;
	a_m2 : 0 .. 5;
	a_m3 : 0 .. 5;
	b : 0 .. 3;
	b_cp : 0 .. 3;
	c : 0 .. 2;
	c_cp : 0 .. 2;

INVAR case 
	((_turn = _CHO0) & (((b > 2) & (b >= 2)) |
		 (b >= 1))) : _cho0 != 0;
	TRUE : _cho0 = 0;
esac;
INVAR case 
	(_turn = _ARB1) : case 
		(_count = 1) : case 
			(((b >= 1) |
		 ((a >= 1) & (b >= 1))) |
		 (c >= 1)) : _arb1 != 0;
			TRUE : _arb1 = 0;
		esac;
		(_count <= _rand) : case 
			(((_arb1_guard1 & (b >= 1)) |
		 (_arb1_guard2 & ((a >= 1) & (b >= 1)))) |
		 (_arb1_guard3 & (c >= 1))) : _arb1 != 0;
			TRUE : _arb1 = 0;
		esac;
		TRUE : _arb1 = 0;
	esac;
	TRUE : _arb1 = 0;
esac;
INVAR case 
	(_turn = _MAX2) : case 
		(_count = 0) : case 
			(((b >= 1) |
		 ((a >= 1) & (b >= 1))) |
		 (c >= 1)) : _max2 != 0;
			TRUE : _max2 = 0;
		esac;
		(_count = 1) : case 
			(((_max2_guard1 & (b >= 1)) |
		 (_max2_guard2 & ((a >= 1) & (b >= 1)))) |
		 (_max2_guard3 & (c >= 1))) : _max2 != 0;
			TRUE : _max2 = 0;
		esac;
		TRUE : _max2 = 0;
	esac;
	TRUE : _max2 = 0;
esac;

ASSIGN
init (_status) := _ACTIVE;
init (_turn) := _READY;
init (_count) := 0;
_cho0 := case 
	(_turn = _CHO0) : case 
		((b > 2) & (b >= 2)) : 1;
		TRUE : 0;
	esac union case 
		(b >= 1) : 2;
		TRUE : 0;
	esac;
	TRUE : 0;
esac;
_arb1 := case 
	(_turn = _ARB1) : case 
		(_count = 1) : case 
			(b >= 1) : 1;
			TRUE : 0;
		esac union case 
			((a >= 1) & (b >= 1)) : 2;
			TRUE : 0;
		esac union case 
			(c >= 1) : 3;
			TRUE : 0;
		esac;
		(_count <= _rand) : case 
			(_arb1_guard1 & (b >= 1)) : 1;
			TRUE : 0;
		esac union case 
			(_arb1_guard2 & ((a >= 1) & (b >= 1))) : 2;
			TRUE : 0;
		esac union case 
			(_arb1_guard3 & (c >= 1)) : 3;
			TRUE : 0;
		esac;
		TRUE : 0;
	esac;
	TRUE : 0;
esac;
init (_rand) := 0;
init (_arb1_guard1) := FALSE;
init (_arb1_guard2) := FALSE;
init (_arb1_guard3) := FALSE;
_max2 := case 
	(_turn = _MAX2) : case 
		(_count = 0) : case 
			(b >= 1) : 1;
			TRUE : 0;
		esac union case 
			((a >= 1) & (b >= 1)) : 2;
			TRUE : 0;
		esac union case 
			(c >= 1) : 3;
			TRUE : 0;
		esac;
		(_count = 1) : case 
			(_max2_guard1 & (b >= 1)) : 1;
			TRUE : 0;
		esac union case 
			(_max2_guard2 & ((a >= 1) & (b >= 1))) : 2;
			TRUE : 0;
		esac union case 
			(_max2_guard3 & (c >= 1)) : 3;
			TRUE : 0;
		esac;
		TRUE : 0;
	esac;
	TRUE : 0;
esac;
init (_max2_guard1) := FALSE;
init (_max2_guard2) := FALSE;
init (_max2_guard3) := FALSE;
_seq3 := case 
	(_turn = _SEQ3) : case 
		((_count = 1) & (a >= 1)) : 1;
		((_count = 2) & ((a = 3) & (c >= 2))) : 2;
		TRUE : 0;
	esac;
	TRUE : 0;
esac;
init (a) := p_a;
init (a_cp) := 0;
init (a_m2) := 0;
init (a_m3) := 0;
init (b) := p_b;
init (b_cp) := 0;
init (c) := 0;
init (c_cp) := 0;

next (_status) := case 
	((_status = _willDISSOLVE) & (_sync = _BUSY)) : _willDISSOLVE;
	((_status = _willDISSOLVE) & (_sync = _EXCH)) : _DISSOLVED;
	((_seq3 = 2) & ((a = 3) & (c >= 2))) : _willDISSOLVE;
	TRUE : _status;
esac;

next (_turn) := case 
	((_status = _ACTIVE) & (_turn = _READY)) : case 
		(_sync = _BUSY) : _READY;
		(_sync = _EXCH) : _CHO0;
		TRUE : _turn;
	esac;
	(_turn = _CHO0) : _ARB1;
	(_turn = _ARB1) : case 
		((_count < _rand) & (_arb1 != 0)) : _ARB1;
		TRUE : _MAX2;
	esac;
	(_turn = _MAX2) : case 
		(_max2 != 0) : _MAX2;
		TRUE : _SEQ3;
	esac;
	(_turn = _SEQ3) : case 
		(_seq3 != 0) : _SEQ3;
		TRUE : _READY;
	esac;
	((_status = _DISSOLVED)) : _READY;
	TRUE : _turn;
esac;
next (_count) := case 
	((_turn = _ARB1) & (_count < _rand)) : case 
		(_arb1 != 0) : _count + 1;
		TRUE : 0;
	esac;
	(_turn = _MAX2) : case 
		(_max2 != 0) : 1;
		TRUE : 1;
	esac;
	((_turn = _SEQ3) & (_count < 2)) : case 
		(_seq3 != 0) : _count + 1;
		TRUE : 0;
	esac;
	(((next(_turn) = _ARB1)) | (next(_turn) = _SEQ3)) : 1;
	TRUE : 0;
esac;
next (_rand) := case 
	((((_status = _ACTIVE)) | ((_status = _willDISSOLVE))) & ((_turn != _ARB1) & (next(_turn) = _ARB1))) : 1 .. 3;
	((((_status = _ACTIVE)) | ((_status = _willDISSOLVE))) & ((_turn = _ARB1) & (next(_turn) = _ARB1))) : _rand;
	TRUE : 0;
esac;
next (_arb1_guard1) := case 
	((_turn = _ARB1) & ((_arb1 != 0) & (_count = 1))) : TRUE;
	((((_status = _ACTIVE) | ((_status = _willDISSOLVE))) & (next(_turn) = _ARB1)) & (_arb1 != 0)) : _arb1_guard1;
	TRUE : FALSE;
esac;
next (_arb1_guard2) := case 
	((_turn = _ARB1) & ((_arb1 != 0) & (_count = 1))) : TRUE;
	((((_status = _ACTIVE) | ((_status = _willDISSOLVE))) & (next(_turn) = _ARB1)) & (_arb1 != 0)) : _arb1_guard2;
	TRUE : FALSE;
esac;
next (_arb1_guard3) := case 
	((_turn = _ARB1) & ((_arb1 != 0) & (_count = 1))) : TRUE;
	((((_status = _ACTIVE) | ((_status = _willDISSOLVE))) & (next(_turn) = _ARB1)) & (_arb1 != 0)) : _arb1_guard3;
	TRUE : FALSE;
esac;
next (_max2_guard1) := case 
	((_turn = _MAX2) & ((_max2 != 0) & (_count = 0))) : TRUE;
	((((_status = _ACTIVE) | ((_status = _willDISSOLVE))) & (next(_turn) = _MAX2)) & (_max2 != 0)) : _max2_guard1;
	TRUE : FALSE;
esac;
next (_max2_guard2) := case 
	((_turn = _MAX2) & ((_max2 != 0) & (_count = 0))) : TRUE;
	((((_status = _ACTIVE) | ((_status = _willDISSOLVE))) & (next(_turn) = _MAX2)) & (_max2 != 0)) : _max2_guard2;
	TRUE : FALSE;
esac;
next (_max2_guard3) := case 
	((_turn = _MAX2) & ((_max2 != 0) & (_count = 0))) : TRUE;
	((((_status = _ACTIVE) | ((_status = _willDISSOLVE))) & (next(_turn) = _MAX2)) & (_max2 != 0)) : _max2_guard3;
	TRUE : FALSE;
esac;
next (a) := case 
	(((_turn = _ARB1) & (_arb1 = 2)) & (((a - 1 >= 0) & (a - 1 <= 5)) & ((a >= 1) & (b >= 1)))) : a - 1;
	(((_turn = _MAX2) & (_max2 = 2)) & (((a - 1 >= 0) & (a - 1 <= 5)) & ((a >= 1) & (b >= 1)))) : a - 1;
	(((_turn = _SEQ3) & (_seq3 = 1)) & (((a - 1 >= 0) & (a - 1 <= 5)) & (a >= 1))) : a - 1;
	(((_status = _ACTIVE) & (_sync = _EXCH)) & ((a + a_cp >= 0) & (a + a_cp <= 5))) : a + a_cp;
	(((_status = _willDISSOLVE)) & (_sync = _EXCH)) : 0;
	((_status = _DISSOLVED)) : 0;
	TRUE : a;
esac;
next (a_cp) := case 
	(((_turn = _ARB1) & (_arb1 = 3)) & (((a_cp + 1 >= 0) & (a_cp + 1 <= 5)) & (c >= 1))) : a_cp + 1;
	(((_turn = _MAX2) & (_max2 = 3)) & (((a_cp + 1 >= 0) & (a_cp + 1 <= 5)) & (c >= 1))) : a_cp + 1;
	((_status = _ACTIVE) & (_sync = _EXCH)) : 0;
	(((_status = _willDISSOLVE)) & (_sync = _EXCH)) : 0;
	((_status = _DISSOLVED)) : 0;
	TRUE : a_cp;
esac;
next (a_m2) := case 
	(((_turn = _CHO0) & ((_cho0 = 1) & ((a_m2 + 1 >= 0) & (a_m2 + 1 <= 5)))) & ((_connC2 = to_m2) & ((b > 2) & (b >= 2)))) : a_m2 + 1;
	((_status = _ACTIVE) & (_sync = _EXCH)) : 0;
	(((_status = _willDISSOLVE)) & (_sync = _EXCH)) : 0;
	((_status = _DISSOLVED)) : 0;
	TRUE : a_m2;
esac;
next (a_m3) := case 
	(((_turn = _CHO0) & ((_cho0 = 1) & ((a_m3 + 1 >= 0) & (a_m3 + 1 <= 5)))) & ((_connC2 = to_m3) & ((b > 2) & (b >= 2)))) : a_m3 + 1;
	((_status = _ACTIVE) & (_sync = _EXCH)) : 0;
	(((_status = _willDISSOLVE)) & (_sync = _EXCH)) : 0;
	((_status = _DISSOLVED)) : 0;
	TRUE : a_m3;
esac;
next (b) := case 
	(((_turn = _CHO0) & (_cho0 = 1)) & (((b - 2 >= 0) & (b - 2 <= 3)) & ((b > 2) & (b >= 2)))) : b - 2;
	(((_turn = _CHO0) & (_cho0 = 2)) & (((b - 1 >= 0) & (b - 1 <= 3)) & (b >= 1))) : b - 1;
	(((_turn = _ARB1) & (_arb1 = 1)) & (((b - 1 >= 0) & (b - 1 <= 3)) & (b >= 1))) : b - 1;
	(((_turn = _ARB1) & (_arb1 = 2)) & (((b - 1 >= 0) & (b - 1 <= 3)) & ((a >= 1) & (b >= 1)))) : b - 1;
	(((_turn = _MAX2) & (_max2 = 1)) & (((b - 1 >= 0) & (b - 1 <= 3)) & (b >= 1))) : b - 1;
	(((_turn = _MAX2) & (_max2 = 2)) & (((b - 1 >= 0) & (b - 1 <= 3)) & ((a >= 1) & (b >= 1)))) : b - 1;
	(((_status = _ACTIVE) & (_sync = _EXCH)) & ((b + b_cp >= 0) & (b + b_cp <= 3))) : b + b_cp;
	(((_status = _willDISSOLVE)) & (_sync = _EXCH)) : 0;
	((_status = _DISSOLVED)) : 0;
	TRUE : b;
esac;
next (b_cp) := case 
	(((_turn = _CHO0) & (_cho0 = 1)) & (((b_cp + 1 >= 0) & (b_cp + 1 <= 3)) & ((b > 2) & (b >= 2)))) : b_cp + 1;
	(((_turn = _CHO0) & (_cho0 = 2)) & (((b_cp + 2 >= 0) & (b_cp + 2 <= 3)) & (b >= 1))) : b_cp + 2;
	(((_turn = _ARB1) & (_arb1 = 3)) & (((b_cp + 1 >= 0) & (b_cp + 1 <= 3)) & (c >= 1))) : b_cp + 1;
	(((_turn = _MAX2) & (_max2 = 3)) & (((b_cp + 1 >= 0) & (b_cp + 1 <= 3)) & (c >= 1))) : b_cp + 1;
	(((_turn = _SEQ3) & (_seq3 = 1)) & (((b_cp + 1 >= 0) & (b_cp + 1 <= 3)) & (a >= 1))) : b_cp + 1;
	((_status = _ACTIVE) & (_sync = _EXCH)) : 0;
	(((_status = _willDISSOLVE)) & (_sync = _EXCH)) : 0;
	((_status = _DISSOLVED)) : 0;
	TRUE : b_cp;
esac;
next (c_cp) := case 
	(((_turn = _ARB1) & (_arb1 = 2)) & (((c_cp + 1 >= 0) & (c_cp + 1 <= 2)) & ((a >= 1) & (b >= 1)))) : c_cp + 1;
	(((_turn = _MAX2) & (_max2 = 2)) & (((c_cp + 1 >= 0) & (c_cp + 1 <= 2)) & ((a >= 1) & (b >= 1)))) : c_cp + 1;
	((_status = _ACTIVE) & (_sync = _EXCH)) : 0;
	(((_status = _willDISSOLVE)) & (_sync = _EXCH)) : 0;
	((_status = _DISSOLVED)) : 0;
	TRUE : c_cp;
esac;

 ----------------------- C2 ----------------------- 
MODULE m2_C2 (p_a, _sync )
VAR
_turn : {_CHO0,_READY};
_cho0 : 0 .. 2;
	a : 0 .. 5;
	c_m1 : 0 .. 2;

INVAR case 
	((_turn = _CHO0) & ((a >= 1) |
		 (a >= 1))) : _cho0 != 0;
	TRUE : _cho0 = 0;
esac;

ASSIGN
init (_turn) := _READY;
_cho0 := case 
	(_turn = _CHO0) : case 
		(a >= 1) : 1;
		TRUE : 0;
	esac union case 
		(a >= 1) : 2;
		TRUE : 0;
	esac;
	TRUE : 0;
esac;
init (a) := p_a;
init (c_m1) := 0;

next (_turn) := case 
	((_turn = _READY)) : case 
		(_sync = _BUSY) : _READY;
		(_sync = _EXCH) : _CHO0;
		TRUE : _turn;
	esac;
	(_turn = _CHO0) : _READY;
	TRUE : _turn;
esac;
next (c_m1) := case 
	(((_turn = _CHO0) & ((_cho0 = 2) & ((c_m1 + 2 >= 0) & (c_m1 + 2 <= 2)))) & (a >= 1)) : c_m1 + 2;
	((_sync = _EXCH)) : 0;
	TRUE : c_m1;
esac;

 ----------------------- C2 ----------------------- 
MODULE m3_C2 (p_a, _sync )
VAR
_turn : {_CHO0,_READY};
_cho0 : 0 .. 2;
	a : 0 .. 5;
	c_m1 : 0 .. 2;

INVAR case 
	((_turn = _CHO0) & ((a >= 1) |
		 (a >= 1))) : _cho0 != 0;
	TRUE : _cho0 = 0;
esac;

ASSIGN
init (_turn) := _READY;
_cho0 := case 
	(_turn = _CHO0) : case 
		(a >= 1) : 1;
		TRUE : 0;
	esac union case 
		(a >= 1) : 2;
		TRUE : 0;
	esac;
	TRUE : 0;
esac;
init (a) := p_a;
init (c_m1) := 0;

next (_turn) := case 
	((_turn = _READY)) : case 
		(_sync = _BUSY) : _READY;
		(_sync = _EXCH) : _CHO0;
		TRUE : _turn;
	esac;
	(_turn = _CHO0) : _READY;
	TRUE : _turn;
esac;
next (c_m1) := case 
	(((_turn = _CHO0) & ((_cho0 = 2) & ((c_m1 + 2 >= 0) & (c_m1 + 2 <= 2)))) & (a >= 1)) : c_m1 + 2;
	((_sync = _EXCH)) : 0;
	TRUE : c_m1;
esac;

 ----------------------- MAIN ----------------------- 
MODULE main
VAR
_sync : {_BUSY,_EXCH};
pInS : boolean;
	m1 : m1_C1(2,1,_sync);
	m2 : m2_C2(1,_sync);
	m3 : m3_C2(5,_sync);
ASSIGN
init (_sync) := _EXCH;
init (pInS) := TRUE;
next (_sync) := case 
	((((next(m1._turn) = _READY)) 
	& (next(m2._turn) = _READY)) 
	& (next(m3._turn) = _READY)) : _EXCH;
	TRUE : _BUSY;
esac;
next (pInS) := case 
	(_sync = _EXCH) : TRUE;
	TRUE : FALSE;
esac;

next (m1.c) := case
(((m1._status = _ACTIVE) & (_sync = _EXCH)) & ((m1.c + m1.c_cp + m2.c_m1 + m3.c_m1 >= 0) & (m1.c + m1.c_cp + m2.c_m1 + m3.c_m1 <= 2))) : m1.c + m1.c_cp + m2.c_m1 + m3.c_m1;
(((m1._turn = _ARB1) & (m1._arb1 = 3)) & (((m1.c - 1 >= 0) & (m1.c - 1 <= 2)) & (m1.c >= 1))) : m1.c - 1;
(((m1._turn = _MAX2) & (m1._max2 = 3)) & (((m1.c - 1 >= 0) & (m1.c - 1 <= 2)) & (m1.c >= 1))) : m1.c - 1;
(((m1._turn = _SEQ3) & (m1._seq3 = 2)) & (((m1.c - 2 >= 0) & (m1.c - 2 <= 2)) & ((m1.a = 3) & (m1.c >= 2)))) : m1.c - 2;
(((m1._status = _willDISSOLVE)) & (_sync = _EXCH)) : 0;
((m1._status = _DISSOLVED)) : 0;
TRUE : m1.c;
esac;
next (m2.a) := case
(((_sync = _EXCH)) & ((m2.a + m1.a_m2 >= 0) & (m2.a + m1.a_m2 <= 5))) : m2.a + m1.a_m2;
(((m2._turn = _CHO0) & (m2._cho0 = 1)) & (((m2.a - 1 >= 0) & (m2.a - 1 <= 5)) & (m2.a >= 1))) : m2.a - 1;
(((m2._turn = _CHO0) & (m2._cho0 = 2)) & (((m2.a - 1 >= 0) & (m2.a - 1 <= 5)) & (m2.a >= 1))) : m2.a - 1;
TRUE : m2.a;
esac;
next (m3.a) := case
(((_sync = _EXCH)) & ((m3.a + m1.a_m3 >= 0) & (m3.a + m1.a_m3 <= 5))) : m3.a + m1.a_m3;
(((m3._turn = _CHO0) & (m3._cho0 = 1)) & (((m3.a - 1 >= 0) & (m3.a - 1 <= 5)) & (m3.a >= 1))) : m3.a - 1;
(((m3._turn = _CHO0) & (m3._cho0 = 2)) & (((m3.a - 1 >= 0) & (m3.a - 1 <= 5)) & (m3.a >= 1))) : m3.a - 1;
TRUE : m3.a;
esac;

